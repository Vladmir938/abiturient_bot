import json
import requests

from bot_app.config import ZABGU_API_URL, API_HEADERS, API_COOKIES, SUBJECT_COUNT_TO_OFFER

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
MAX_MESSAGE_LENGTH = 4096

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö ---
ALL_SUBJECTS_DATA = []
try:
    with open('data/entrance_exam_scores.json', 'r', encoding='utf-8') as f:
        ALL_SUBJECTS_DATA = json.load(f)
except FileNotFoundError:
    print(
        "–û–®–ò–ë–ö–ê: –§–∞–π–ª data/entrance_exam_scores.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å!")
except json.JSONDecodeError:
    print("–û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ data/entrance_exam_scores.json.")

OFFERED_SUBJECTS = ALL_SUBJECTS_DATA[:SUBJECT_COUNT_TO_OFFER]


def get_subject_min_score(subject_name):
    for subject_data in ALL_SUBJECTS_DATA:
        if subject_data.get('name') == subject_name:
            return subject_data.get('min_score', 0)
    return 0


def fetch_programs_from_zabgu(selected_subjects_with_scores):
    if not selected_subjects_with_scores:
        print("utils_ege: –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API.")  # –û—Å—Ç–∞–≤–∏–ª print
        return None
    params = []
    for subject_name, score in selected_subjects_with_scores:
        params.append(("arrayForSendingWithMinCount[]", str(score)))
        params.append(("arrayForSendingWithPredmet[]", subject_name))
    params.extend([("spo", "0"), ("diplom", "0"), ("gto", "0")])
    # print(f"utils_ege: –ó–∞–ø—Ä–æ—Å –∫ API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
    try:
        response = requests.get(ZABGU_API_URL, headers=API_HEADERS, params=params, cookies=API_COOKIES, timeout=20)
        response.raise_for_status()
        # print(f"utils_ege: –û—Ç–≤–µ—Ç –æ—Ç API –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å {response.status_code}")
        return response.json()
    except requests.exceptions.Timeout:
        print(f"utils_ege: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ {ZABGU_API_URL}")
        return None
    except requests.exceptions.HTTPError as http_err:
        print(f"utils_ege: HTTP –æ—à–∏–±–∫–∞: {http_err} - {response.text[:200]}")
        return None
    except requests.exceptions.RequestException as e:
        print(f"utils_ege: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
    except ValueError:
        print(
            f"utils_ege: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON. –û—Ç–≤–µ—Ç: {response.text[:200] if 'response' in locals() and hasattr(response, 'text') else '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç'}")  # –û—Å—Ç–∞–≤–∏–ª print
        return None


def format_programs_for_sending(api_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–ü–ò–°–û–ö —Å–æ–æ–±—â–µ–Ω–∏–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.
    –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∞—è MAX_MESSAGE_LENGTH.
    –ü—Ä–æ–≥—Ä–∞–º–º—ã –≤—ã–≤–æ–¥—è—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, –ë–ï–ó —è–≤–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–∞–º –æ–±—É—á–µ–Ω–∏—è –≤ –≤–∏–¥–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
    """
    # print(f"utils_ege: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö API: {str(api_data)[:200]}...")
    if not api_data or not isinstance(api_data, dict):
        return [
            "–ü–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –∏ –±–∞–ª–ª–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."]

    messages_to_send = []
    current_message_text = "<b>‚ú® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è:</b>\n\n"
    found_programs_at_all = False  # –§–ª–∞–≥, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –æ–¥–∏–Ω "–ø–ª–æ—Å–∫–∏–π" —Å–ø–∏—Å–æ–∫, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è
    all_programs_flat_list = []
    for form_of_study, programs_dict in api_data.items():
        if not programs_dict or not isinstance(programs_dict, dict):
            continue
        for program_full_name_key, details in programs_dict.items():
            if not isinstance(details, dict):
                continue
            all_programs_flat_list.append({
                "form_of_study": form_of_study,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è
                "program_key": program_full_name_key,  # "–ö–æ–¥ - –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                "details": details
            })
            found_programs_at_all = True

    if not found_programs_at_all:
        return ["–ü–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –∏ –±–∞–ª–ª–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

    # –¢–µ–ø–µ—Ä—å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —ç—Ç–æ–º—É –ø–ª–æ—Å–∫–æ–º—É —Å–ø–∏—Å–∫—É –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    is_first_program_in_current_message = True  # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

    for program_data in all_programs_flat_list:
        form_of_study = program_data["form_of_study"]
        details = program_data["details"]

        code = details.get('code', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        profile_name = details.get('profile', '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        program_title = f"{code} - {profile_name}"  # "–ö–æ–¥ - –ù–∞–∑–≤–∞–Ω–∏–µ –ü—Ä–æ—Ñ–∏–ª—è"
        budget_places = details.get('number_of_budget_places', '–Ω/–¥')
        passing_score = details.get('passing_score', '–Ω/–¥')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        program_block = (
            f"üîπ <b>{program_title}</b>\n"
            f"   –§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {form_of_study}\n"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
            f"   –ë—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç: {budget_places}\n"
            f"   –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª (–æ—Ä–∏–µ–Ω—Ç–∏—Ä): {passing_score}\n\n"
        )

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ (–∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫),
        # –∏ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫.
        if is_first_program_in_current_message and not current_message_text.startswith(
                "<b>‚ú® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è:</b>"):
            current_message_text = "<b>‚ú® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è:</b>\n\n" + current_message_text

        is_first_program_in_current_message = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –±–ª–æ–∫ –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(current_message_text) + len(program_block) > MAX_MESSAGE_LENGTH:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if current_message_text.strip() and current_message_text.strip() != "<b>‚ú® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è:</b>":
                messages_to_send.append(current_message_text.strip())

            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            current_message_text = "<b>‚ú® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è:</b>\n\n" + program_block
            is_first_program_in_current_message = False  # –£–∂–µ –Ω–µ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫
        else:
            current_message_text += program_block

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ (–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    if current_message_text.strip() and current_message_text.strip() != "<b>‚ú® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è:</b>":
        messages_to_send.append(current_message_text.strip())

    if not messages_to_send:  # –ï—Å–ª–∏ —Ç–∞–∫ –∏ –Ω–µ —Å–æ–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
        return ["–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."]

    return messages_to_send